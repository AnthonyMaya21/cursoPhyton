#define el nombre del flujo de trabajo.
name: "Build iOS app"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
  push:
    # Inidica las ramas del repositorio que desencadenarán el flujo de trabajo.
    branches:
      - main
      - test
# Define un trabajo llamado "build_with_signing".
jobs:
  build_with_signing:
    # Define el tipo de máquina virtual que se utilizará para ejecutar el flujo de trabajo.    
    runs-on: macos-latest
    steps:
      #define un paso con el nombre "check Xcode version".
      - name: check Xcode version
        # Ejecuta un comando en la máquina virtual.
        # xcodebuild, una herramienta de línea de comandos
        # que permite compilar proyectos de Xcode,
        run: /usr/bin/xcodebuild -version
        # Define un paso con el nombre "checkout repository".
      - name: checkout repository
        # indica que este paso utiliza la acción checkout en su versión 2
        # Esta acción permite obtener una copia del repositorio en la
        # máquina virtual donde se está ejecutando el flujo de trabajo.
        uses: actions/checkout@v2
        #Define un paso con el nombre 'Install the Apple certificate
        # and provisioning profile'
      - name: Debug logs
        run: |
          echo -n "BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}"
          echo -n "P12_PASSWORD: ${{ secrets.P12_PASSWORD }}"
          echo -n "BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}"
          echo -n "KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}"
          
        # ... otros mensajes de registro según sea necesario
        # Instala el certificado de Apple y el perfil de aprovisionamiento
      - name: Install the Apple certificate and provisioning profile
        # clave que permite definir variables de entorno.
        env:
          #Define una variable de entorno llamada BUILD_CERTIFICATE_BASE64. 
          #El valor de esta variable se obtiene de secrets.BUILD_CERTIFICATE_BASE64,
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          
      # Define un paso con el nombre 'build archive'

      ############################################
    
